pipeline {
  agent any

  environment {
    REPO_URL     = 'git@github.com:Xtute-Technologies/tutorlix_next.git'
    BRANCH       = 'main'
    DEPLOY_PATH  = '/var/lib/jenkins/workspace/tutorlix_frontend_main'
    COMPOSE_FILE = 'docker-compose.yml'
    BUILD_DIR    = 'dist'        // üëà change if build folder is build/ or .next
  }

  stages {

    stage('Checkout') {
      steps {
        git branch: "${BRANCH}", credentialsId: 'github-ssh-key', url: "${REPO_URL}"
      }
    }

    stage('Build Single-SPA Root') {
      steps {
        // run build from root so webpack config uses correct __dirname
        sh '''
          echo "üì¶ Installing dependencies..."
          npm install

          echo "üèóÔ∏è Building single-spa root app (webpack will emit to ./dist at repo root)..."
          npm run build

          echo "‚úÖ Build complete. Files in repo-root ./dist:"
          ls -lah ./dist || true
        '''
      }
    }
    stage('Deploy Locally') {
      steps {
        sh '''
          set -euo pipefail
          echo "üöö Deploying build to ${DEPLOY_PATH}..."

          sudo mkdir -p ${DEPLOY_PATH}
          sudo chown -R $USER:$USER ${DEPLOY_PATH}

          # copy docker-compose.yml to deploy path
          cp ${COMPOSE_FILE} ${DEPLOY_PATH}/

          # Prepare frontend build context expected by docker-compose
          FRONTEND_DIR=${DEPLOY_PATH}/frontend
          echo "Ensuring frontend build context exists at ${FRONTEND_DIR}..."
          rm -rf "${FRONTEND_DIR}"
          mkdir -p "${FRONTEND_DIR}"

          echo "Copying built artifacts (repo-root ./dist) into frontend build context..."
          if [ ! -d "./dist" ]; then
            echo "ERROR: ./dist not found. Build did not produce ./dist. Aborting."
            exit 1
          fi

          cp -r ./dist "${FRONTEND_DIR}/dist"

          # Create minimal Dockerfile that serves the static dist via nginx
          cat > "${FRONTEND_DIR}/Dockerfile" <<'DOCKERFILE'
          FROM nginx:stable-alpine
          # remove default content
          RUN rm -rf /usr/share/nginx/html/*
          # copy build
          COPY dist /usr/share/nginx/html
          # optional: copy custom nginx conf for SPA routing
          RUN printf "server { listen 80; server_name _; root /usr/share/nginx/html; index index.html; location / { try_files $uri $uri/ /index.html; } }" > /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
    DOCKERFILE

          echo "Frontend context prepared (contains Dockerfile + dist)."

          # Optional: show what compose will see
          echo "--- ${DEPLOY_PATH} contents ---"
          ls -la ${DEPLOY_PATH} || true
          echo "--- ${FRONTEND_DIR} contents ---"
          ls -la ${FRONTEND_DIR} || true

          # Run docker compose
          cd ${DEPLOY_PATH}
          docker compose -f ${COMPOSE_FILE} down || true
          docker compose -f ${COMPOSE_FILE} build --no-cache
          docker compose -f ${COMPOSE_FILE} up -d --remove-orphans

          echo "‚úÖ Deployment done. Containers:"
          docker ps --filter "name=tutorlix" --format "table {{.Names}}\t{{.Status}}"
        '''
      }
    }


    stage('Restart Nginx') {
      steps {
        sh '''
          echo "‚ôªÔ∏è Restarting Nginx..."
          sudo systemctl restart nginx || echo "‚ö†Ô∏è Nginx restart skipped (no permission)"
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ Single-SPA root app deployed successfully at https://xtute.com"
    }
    failure {
      echo "‚ùå Deployment failed. Check Jenkins console output for details."
    }
  }
}
