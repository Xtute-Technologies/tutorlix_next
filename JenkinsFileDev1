pipeline {
  agent any

  environment {
    REPO_URL     = 'git@github.com:Xtute-Technologies/tutorlix_next.git'
    BRANCH       = 'main'
    DEPLOY_PATH  = '/var/lib/jenkins/workspace/tutorlix_frontend_main'
    COMPOSE_FILE = 'docker-compose.yml'
    BUILD_DIR    = 'dist'                 // change if your build folder is different
    PIN_PLUGIN_VERSION = '1.1.0'          // pinned CJS version to avoid ERR_REQUIRE_ESM
    AJV_PIN      = '6.12.6'               // pin to fix ajv/dist/compile/codegen not found
    NGINX_USER   = 'www-data'             // change if your nginx runs as another user
  }

  stages {

    stage('Checkout') {
      steps {
        git branch: "${BRANCH}", credentialsId: 'github-ssh-key', url: "${REPO_URL}"
      }
    }

    stage('Prepare Node / Install (pin plugin + ajv)') {
      steps {
        sh '''
          set -eu

          echo "Node version:"
          node -v || true
          echo "NPM version:"
          npm -v || true

          echo "üì¶ Pinning standalone-single-spa-webpack-plugin@${PIN_PLUGIN_VERSION} and ajv@${AJV_PIN} (CJS) and preparing clean install..."

          # Pin problematic packages to compatible versions (idempotent)
          npm install --no-save --no-audit --no-fund --save-exact standalone-single-spa-webpack-plugin@${PIN_PLUGIN_VERSION} || true
          npm install --no-save --no-audit --no-fund --save-exact ajv@${AJV_PIN} || true

          # Ensure a completely fresh install to produce reproducible lockfile
          rm -rf node_modules package-lock.json

          echo "Installing dependencies (legacy-peer-deps)..."
          npm install --legacy-peer-deps
        '''
      }
    }

    stage('Build Single-SPA Root') {
      steps {
        sh '''
          set -eu

          echo "üèóÔ∏è Building single-spa root app (webpack will emit to ./dist at repo root)..."
          npm run build

          # Ensure importmap.json exists in repo root and copy it into dist (so server serves it)
          if [ -f ./importmap.json ]; then
            echo "Copying importmap.json into dist/"
            cp ./importmap.json ./dist/importmap.json
          else
            echo "Warning: importmap.json not found at repo root; ensure CI provides it or pipeline will 404"
          fi

          cd ${WORKSPACE}/dist

          # create a stable symlink for the latest hashed chunk (if hashed filename exists)
          latest=$(ls -1t tutorlix-root-config.*.js 2>/dev/null | head -n1 || true)
          if [ -n "$latest" ]; then
            ln -sf "$latest" tutorlix-root-config.js
            echo "Linked $latest -> tutorlix-root-config.js"
          else
            if [ -f "tutorlix-root-config.js" ]; then
              echo "Found tutorlix-root-config.js (non-hashed)."
            else
              echo "ERROR: No tutorlix-root-config.*.js or tutorlix-root-config.js found in dist"
              exit 1
            fi
          fi

          echo "‚úÖ Build complete. Files in ./dist:"
          ls -lah ./ || true
        '''
      }
    }

    stage('Deploy Locally') {
      steps {
        sh '''
          set -eu

          echo "üöö Deploying build to ${DEPLOY_PATH}..."

          sudo mkdir -p "${DEPLOY_PATH}"
          FRONTEND_DIR="${DEPLOY_PATH}/frontend"
          sudo rm -rf "${FRONTEND_DIR}" || true
          sudo mkdir -p "${FRONTEND_DIR}"

          echo "Copying built artifacts into ${FRONTEND_DIR}..."
          sudo cp -a "${WORKSPACE}/dist/." "${FRONTEND_DIR}/"

          # ensure importmap.json is present (critical)
          if sudo test -f "${FRONTEND_DIR}/importmap.json"; then
            echo "importmap.json found in deployed frontend."
          else
            echo "Warning: importmap.json missing in deployed frontend; nginx will return 404 for /importmap.json"
          fi

          # give nginx user ownership/read access
          sudo chown -R ${NGINX_USER}:${NGINX_USER} "${FRONTEND_DIR}"
          sudo chmod -R 755 "${FRONTEND_DIR}"

          echo "--- ${DEPLOY_PATH} contents ---"
          sudo ls -la "${DEPLOY_PATH}" || true
          echo "--- ${FRONTEND_DIR} contents ---"
          sudo ls -la "${FRONTEND_DIR}" || true

          # Run docker compose if present
          if [ -f "${DEPLOY_PATH}/${COMPOSE_FILE}" ]; then
            cd "${DEPLOY_PATH}"
            docker compose -f "${COMPOSE_FILE}" down || true
            docker compose -f "${COMPOSE_FILE}" build --no-cache
            docker compose -f "${COMPOSE_FILE}" up -d --remove-orphans
            echo "‚úÖ Docker compose started."
          else
            echo "No ${COMPOSE_FILE} at ${DEPLOY_PATH}; skipping docker compose."
          fi

          echo "‚úÖ Deployment (files copied)."
        '''
      }
    }

    stage('Restart Nginx') {
      steps {
        sh '''
          echo "‚ôªÔ∏è Restarting Nginx..."
          sudo nginx -t
          sudo systemctl restart nginx
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ Single-SPA root app deployed successfully at https://dev.tutorlix.com"
    }
    failure {
      echo "‚ùå Deployment failed. Check Jenkins console output for details."
    }
  }
}
