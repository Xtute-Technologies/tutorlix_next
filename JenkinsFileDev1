pipeline {
  agent any

  environment {
    REPO_URL     = 'git@github.com:Xtute-Technologies/tutorlix_next.git'
    BRANCH       = 'main'
    DEPLOY_PATH  = '/var/lib/jenkins/workspace/tutorlix_frontend_main'
    COMPOSE_FILE = 'docker-compose.yml'
    BUILD_DIR    = 'dist',
    PIN_PLUGIN_VERSION = '1.1.0'
  }

  stages {

    stage('Checkout') {
      steps {
        git branch: "${BRANCH}", credentialsId: 'github-ssh-key', url: "${REPO_URL}"
      }
    }

    stage('Build Single-SPA Root') {
      steps {
        // run build from root so webpack config uses correct __dirname
        sh '''
          npm install --save-dev webpack-config-single-spa@latest standalone-single-spa-webpack-plugin@1.1.0 webpack-cli@latest
          # verify a clean install
          rm -rf node_modules package-lock.json
          echo "üì¶ Installing dependencies..."
          npm install

          echo "üèóÔ∏è Building single-spa root app (webpack will emit to ./dist at repo root)..."
          npm run build

          cd ${WORKSPACE}/dist
          # remove any previous symlink/file and create a new symlink pointing to the latest hashed file
          latest=$(ls -1t tutorlix-root-config.*.js 2>/dev/null | head -n1)
          if [ -n "$latest" ]; then
            ln -sf "$latest" tutorlix-root-config.js
            echo "Linked $latest -> tutorlix-root-config.js"
          else
            echo "No tutorlix-root-config.*.js found in dist"
            exit 1
          fi

          echo "‚úÖ Build complete. Files in repo-root ./dist:"
          ls -lah ./dist || true
        '''
      }
    }

    stage('Deploy Locally') {
      steps {
        sh '''
          # POSIX-safe (works with /bin/sh)
          set -eu

          echo "üöö Deploying build to ${DEPLOY_PATH}..."

          sudo mkdir -p "${DEPLOY_PATH}"
          sudo chown -R "$USER":"$USER" "${DEPLOY_PATH}"

          # Prepare frontend build context expected by docker-compose
          FRONTEND_DIR="${DEPLOY_PATH}/frontend"
          echo "Ensuring frontend build context exists at ${FRONTEND_DIR}..."
          rm -rf "${FRONTEND_DIR}" || true
          mkdir -p "${FRONTEND_DIR}"

          echo "Copying built artifacts (repo-root ./dist) into frontend build context..."
          if [ ! -d "./dist" ]; then
            echo "ERROR: ./dist not found. Build did not produce ./dist. Aborting."
            exit 1
          fi

          echo "Frontend context prepared (contains Dockerfile + dist)."

          # show what compose will see
          echo "--- ${DEPLOY_PATH} contents ---"
          ls -la "${DEPLOY_PATH}" || true
          echo "--- ${FRONTEND_DIR} contents ---"
          ls -la "${FRONTEND_DIR}" || true

          # Run docker compose
          cd "${DEPLOY_PATH}"
          docker compose -f "${COMPOSE_FILE}" down || true
          docker compose -f "${COMPOSE_FILE}" build --no-cache
          docker compose -f "${COMPOSE_FILE}" up -d --remove-orphans

          echo "‚úÖ Deployment done. Containers:"
          docker ps --filter "name=tutorlix" --format "table {{.Names}}\t{{.Status}}"
        '''
      }
    }


    stage('Restart Nginx') {
      steps {
        sh '''
          echo "‚ôªÔ∏è Restarting Nginx..."
          sudo systemctl restart nginx || echo "‚ö†Ô∏è Nginx restart skipped (no permission)"
        '''
      }
    }
  }

  post {
    success {
      echo "‚úÖ Single-SPA root app deployed successfully at https://xtute.com"
    }
    failure {
      echo "‚ùå Deployment failed. Check Jenkins console output for details."
    }
  }
}
